from flask import Blueprint, request, flash, g
from flask import render_template, redirect, url_for
from flask.ext.login import login_required
import re, requests

from app import app, db
from app.service.forms import *
from app.service.models import *
from app.users.decorators import check_locked

mod = Blueprint('service', __name__, url_prefix='/service')

def addRequest(dfrom, dto, reason, filename):
    blacklist = [
        'location',
    ]
    initial = reason
    for expr in blacklist:
        reason = re.sub(expr, '', reason.lower())
    r = LeaveRequest(g.user.id, dfrom, dto, reason, filename)
    db.session.add(r)
    db.session.commit()
    return initial == reason


@mod.route('/', methods=['GET', 'POST'])
@login_required
@check_locked
def index():
    r = LeaveRequest.query.filter_by(owner=g.user.id).all()
    pr = LeaveRequest.query.filter_by(status="Pending").all()
    return render_template('service/index.html',
            user=g.user, req=r, pending=pr)


@mod.route('/leave', methods=['GET', 'POST'])
@login_required
@check_locked
def leave():
    form = LeaveForm(request.form, csrf_enabled=False)
    if form.validate_on_submit():
        r = addRequest(form.start.data, form.end.data, form.reason.data, '')
        if r:
            flash('Leave Request Submitted')
        else:
            flash('WARNING: XSS detected! You have been reported.')
        return redirect(url_for('service.index') + '#leave')
    elif form.errors:
        print form.errors
        print form.reason.data
        flash('Form failed verification. (fields empty after sanitization)')
    return render_template('service/leave.html', user=g.user, form=form)


@mod.route('/leave/<action>/<rid>', methods=['GET', 'POST'])
@login_required
@check_locked
def manage(action, rid):
    r = LeaveRequest.query.filter_by(id=rid).first()
    if r:
        r.approver = g.user.id
        if action == 'approve':
            r.status = 'Approved'
        else:
            r.status = 'Denied'
        db.session.commit()
    return redirect(url_for('service.index') + '#manage')


@mod.route('/tickets')
@login_required
@check_locked
def tickets():
    return render_template('service/tickets.html', user=g.user)


@mod.route('/ticket/<ticket_id>')
@login_required
@check_locked
def ticket(ticket_id):
    return render_template('service/ticket.html',
                            user=g.user, ticket_id=ticket_id)
