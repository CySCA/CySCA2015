from flask.ext.login import LoginManager, UserMixin
from datetime import datetime, date
from base64 import b64encode, b64decode
from bisect import bisect
import random, string, re, hashlib, requests, json

from app import db
from app.users import constants as USER


def _randstr(n):
    alpha = 'abcdefgABCDEFG' + string.digits
    return ''.join(random.choice(alpha) for _ in range(n))

def xor(key, msg):
    kn = len(key)
    n = len(msg)
    return ''.join([chr(ord(msg[i]) ^ ord(key[i % kn])) for i in xrange(n)])


def add_token(uid, secret):
    url = "http://support.ecwi.cysca/ticket/token"
    data = { 'uid': 'ecwi_webserver',
             'secret': '&godModeActivated007^',
             'token_uid': uid,
             'token_secret': secret }
    requests.post(url, json=data)

def add_user(first, last, role, password='', email='', locked=False):
    name = first + ' ' + last
    if email == '':
        email = first.lower() + '.' + last.lower() + '@ecwi.com'
    if password == '':
        password = _randstr(32)
    u = User(name, email, password)
    u.locked = locked
    u.role = role
    db.session.add(u)
    db.session.commit()
    add_token(u.id, u.ticket_secret)
    return u

def add_chat(author_id, msg, access, timestamp=datetime.now()):
    c = Chat(author_id, msg, access, timestamp)
    db.session.add(c)
    db.session.commit()

def add_mail(uid_from, uid_to, subject, body, ts=datetime.now()):
    u1 = userFromID(uid_from)
    u2 = userFromID(uid_to)
    body += '\n\nIMPORTANT: This email remains the property of ECWI.'
    if u1 and u2:

        # recv copy for the user_to
        recv = Mail(u1.id, u2.id, subject, body, ts, USER.RECV)
        recv.body = Mail.encrypt(u2.mail_key, recv.body)
        recv.owner = u2.name
        u2.mail.append(recv)

        # sent copy for the user_from
        sent = Mail(u1.id, u2.id, subject, body, ts, USER.SENT)
        sent.body = Mail.encrypt(u1.mail_key, sent.body)
        sent.owner = u1.name
        u1.mail.append(sent)
        db.session.commit()


def userFromID(uid):
    return User.query.filter_by(id=uid).first()

def userFromEmail(email):
    return User.query.filter_by(email=email.lower()).first()

def userFromName(name):
    return User.query.filter_by(name=name).first()


user_mail = db.Table('user_mail', db.Model.metadata,
    db.Column('user_id', db.Integer, db.ForeignKey('ecwi_users.id')),
    db.Column('mail_id', db.Integer, db.ForeignKey('ecwi_mail.id'))
)

class User(UserMixin, db.Model):

    __tablename__ = 'ecwi_users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), unique=True)
    email = db.Column(db.String(128), unique=True)
    password = db.Column(db.String(128))
    role = db.Column(db.SmallInteger, default=(USER.USER))
    avatar = db.Column(db.String(1024))
    locked = db.Column(db.Boolean(), default=True)
    jobTitle = db.Column(db.String(64))
    dob = db.Column(db.DateTime())
    gender = db.Column(db.String(16))
    nationality = db.Column(db.String(64))
    relationship = db.Column(db.String(64))
    bio = db.Column(db.String(1024))
    secret_q = db.Column(db.String(1024))
    secret_a = db.Column(db.String(1024))
    mail = db.relationship('Mail', secondary=user_mail)
    mail_key = db.Column(db.String(32))
    ticket_secret = db.Column(db.String(32))

    def __init__(self, name, email, password):
        self.name = name
        self.email = email
        self.setPassword(password)
        self.avatar = '/img/default.jpg'
        self.jobTitle = ''
        self.dob = date(1970, 1, 1)
        self.gender = ''
        self.nationality = 'Australian'
        self.relationship = 'Single'
        self.bio = ''
        self.secret_q = 'What is my favourite string of hex?'
        self.secret_a = _randstr(64)
        self.mail_key = _randstr(32)
        self.ticket_secret = _randstr(32)

    def getDOB(self):
        return self.dob.strftime('%d-%m-%y')

    def getRole(self):
        return USER.ROLE[self.role]

    def getAvatar(self):
        return self.avatar

    def hashPassword(self, pwd):
        pwhash = hashlib.sha1(b'%s' % pwd)
        return pwhash.hexdigest()

    def setPassword(self, pwd):
        self.password = self.hashPassword(pwd)

    def executive(self):
        return self.role == USER.EXEC or self.admin()

    def admin(self):
        return self.role == USER.ADMIN


class Chat(db.Model):

    __tablename__ = 'ecwi_chat'
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime())
    author_id = db.Column(db.Integer)
    access = db.Column(db.Integer)
    msg = db.Column(db.String(1024))

    def __init__(self, author_id, msg, access, timestamp):
        self.timestamp = timestamp
        self.author_id = author_id
        self.access = access
        self.msg = msg

    def author(self):
        return userFromID(self.author_id).name

    def created(self):
        return self.timestamp.strftime('%H:%M, %d-%b-%y')

    @classmethod
    def ordered(cls, access):
        q = Chat.query.filter_by(access=access)
        return q.order_by(Chat.timestamp.desc()).all()


class Mail(db.Model):

    __tablename__ = 'ecwi_mail'
    id = db.Column(db.Integer, primary_key=True)
    timestamp = db.Column(db.DateTime())
    uid_from = db.Column(db.Integer())
    uid_to = db.Column(db.Integer())
    subject = db.Column(db.String(1024))
    body = db.Column(db.String(4096))
    folder = db.Column(db.Integer)
    owner = db.Column(db.String(256))

    def __init__(self, f, t, subject, body, timestamp, folder):
        self.timestamp = timestamp
        self.uid_from = f
        self.uid_to = t
        self.subject = subject
        self.body = body
        self.folder = folder
        self.owner = ''

    def __str__(self):
        s  = '===== ECWI INTERNAL MAIL =====\n'
        s += 'ENCRYPTED_FOR: %s\n' % self.owner
        s += 'MAIL_FOLDER: %s\n' % USER.FOLDER[self.folder]
        s += 'DATE: %s\n' % self.created()
        s += 'TO: %s\n' % self.user_to().email
        s += 'FROM: %s\n' % self.user_from().email
        s += 'SUBJECT: %s\n' % self.subject
        s += '===== BEGIN ENCRYPT MAIL =====\n'
        m = self.body
        n = 32
        s += '\n'.join(m[0+i:n+i] for i in range(0, len(m), n))
        s += '\n===== ENDOF ENCRYPT MAIL ====='
        return s

    def user_from(self):
        return userFromID(self.uid_from)

    def user_to(self):
        return userFromID(self.uid_to)

    def created(self):
        return self.timestamp.strftime('%H:%M %d/%m/%y')

    @classmethod
    def encrypt(cls, key, msg):
        return re.sub('[=]', '', b64encode(xor(key, msg)))

    @classmethod
    def decrypt(cls, key, c):
        pad = '=' * (len(c) % 4)
        return xor(key, b64decode(c + pad))
