using System;
using System.Diagnostics;
using System.IO;
using System.ServiceProcess;
using System.Threading;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Net;

namespace UpdateService
{
    public partial class UpdateService : ServiceBase
    {
        private EventWaitHandle mRunUpdateEvent;
        private const string TRIGGER_EVENT_NAME = "Global\\SoftwareUpdateService_CYSCA_UpdateCheck"; //This needs to be in the global namespace because it will cross sessions
        private const string UPDATE_URL = "http://serioussecurityinc.cysca/universal_updater_update"; 
        public UpdateService()
        {
            this.InitializeComponent();
        }

        private bool SetupUpdateEvent()
        {
            bool createdNew;

            //Setup Security, all authenticated users can open and signal
            EventWaitHandleSecurity ewhs = new EventWaitHandleSecurity();
            SecurityIdentifier wellKnownAuthUsers = new SecurityIdentifier(WellKnownSidType.AuthenticatedUserSid, null);
            EventWaitHandleAccessRule ewhar = new EventWaitHandleAccessRule(wellKnownAuthUsers,EventWaitHandleRights.Modify|EventWaitHandleRights.Synchronize,AccessControlType.Allow);
            ewhs.AddAccessRule(ewhar);
                    
            //Create the update named event
            try
            {
                mRunUpdateEvent = new EventWaitHandle(false, EventResetMode.ManualReset, TRIGGER_EVENT_NAME, out createdNew, ewhs);
            }
            catch (Exception e)
            {
                System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Software Update Service threw an exception when trying to create the update trigger event. Detail="+e.ToString());
                return false;
            }

            return true;            
        }

        private UpdatePackage GetUpdateRequest()
        {
            //See if an update is available.
            WebClient wc = new WebClient();
            try
            {
                wc.Proxy = new WebProxy("proxy.ecwi.cysca", 3128);
                System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Using Proxy " + wc.Proxy.GetProxy(new Uri(UPDATE_URL)).ToString());
                byte[] updateBuffer = wc.DownloadData(UPDATE_URL);
                return UpdatePackage.FromData(updateBuffer);
            }
            catch (Exception e)
            {
                System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Checking for download failed. Detail=" + e.ToString());
                return null;
            }
            
        }

        public void CheckForUpdateAndInstall()
        {
            //Perform an update check
            System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Checking for updates");

            UpdatePackage upd = GetUpdateRequest();

            if( upd != null)
            {
                //Perform an update
                System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Got a valid update package. Executing");
                if (upd.ExecuteUpdater())
                {
                    System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Updater has been executed");
                }
                else
                {
                    System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Unable to execute update");
                }
            }
            
        }

        public void ServiceThreadProc()
        {
            while (true)
            {
                //Wait for event to fire
                this.mRunUpdateEvent.WaitOne();

                //Run the update
                try
                {
                    CheckForUpdateAndInstall();
                }
                catch (Exception e)
                {
                    System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Uncaught exception when checking for update. Trying to continue. Detail=" + e.ToString());
                }

                //Reset the update trigger event
                this.mRunUpdateEvent.Reset();
            }
            
        }

        protected override void OnStart(string[] args)
        {
            Thread st;
            //Send an event log that we are running 
            System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Software Update Service OnStart called");

            if (SetupUpdateEvent() == false)
            {
                System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Software Update Service Exiting");
                this.ExitCode = 6;
                this.Stop();
                return;
            }
            
            //Create a thread and run it
            st = new Thread(new ThreadStart(this.ServiceThreadProc));
            st.Start();

            System.Diagnostics.EventLog.WriteEntry(this.ServiceName, "Software Update Service Started Successfully");
        }

    }
}
