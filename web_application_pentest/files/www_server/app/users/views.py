from flask import Blueprint, request, flash, g
from flask import render_template, redirect, url_for
from flask.ext.login import login_user, logout_user, login_required
from base64 import b64encode, b64decode

from app import app, db, login_manager
from app.users import constants as USER
from app.users.decorators import check_locked
from app.users.models import *
from app.users.forms import *

mod = Blueprint('users', __name__)

login_manager.login_view = "users.login"
login_manager.login_message = "You must login to view this page!"
login_manager.session_protection = None

@login_manager.user_loader
def load_user(id):
    g.user = User.query.get(id)
    return g.user


@mod.route('/')
@login_required
@check_locked
def home():
    if g.user.executive():
        flag = open('/var/www/ecwi/app/templates/flags/flag_3a', 'r').read()
        flash('You\'re an Executive! - '  + flag)
    else:
        flag = open('/var/www/ecwi/app/templates/flags/flag_2a', 'r').read()
        flash('You\'re a User! - '  + flag)
    userMessages = Chat.ordered(USER.USER)
    execMessages = Chat.ordered(USER.EXEC)
    return render_template('users/home.html', user=g.user,
        userMessages=userMessages, execMessages=execMessages)


@mod.route('/admin')
def robots_admin():
    msg = '<h4 class="center">'
    msg += '"It does not matter how slowly you go as long as you do not stop."'
    msg += '</h4>'
    msg += '<h3 class="center">- Confucius</h3>'
    msg += '<img src="/img/confucius.jpg" class="center"/>'
    return render_template('robots.html', msg=msg)


@mod.route('/backup')
def robots_backup():
    msg = '<h3 class="center">Thank you!</h3>'
    msg += '<h4 class="center">But your flag is in another castle.</h4>'
    msg += '<img src="/img/flag.png" class="center"/>'
    return render_template('robots.html', msg=msg)


@mod.route('/protected')
def robots_treasure():
    flag = open('/var/www/ecwi/app/templates/flags/flag_1b', 'r').read()
    return render_template('robots.html', msg=flag)


@mod.route('/profile')
@login_required
@check_locked
def profile():
    return render_template('users/profile.html', user=g.user, pusr=g.user)


@mod.route('/directory')
@login_required
@check_locked
def directory():
    users = User.query.all()
    return render_template('users/directory.html', user=g.user, users=users)


@mod.route('/directory/<uid>')
@login_required
@check_locked
def directoryProfile(uid):
    pusr = User.query.get(uid)
    return render_template('users/profile.html', user=g.user, pusr=pusr)


@mod.route('/inbox', methods=['GET', 'POST'])
@login_required
@check_locked
def inbox():
    form = MailForm(request.form, csrf_enabled=False)
    recv = [m for m in g.user.mail if m.folder == USER.RECV]
    sent = [m for m in g.user.mail if m.folder == USER.SENT]
    if form.validate_on_submit():
        user_to = userFromEmail(form.email.data)
        if user_to:
            add_mail(g.user.id, user_to.id, form.subject.data, form.body.data)
            flash('Mail sent!')
            return redirect(url_for('users.inbox'))
    elif form.errors:
        flash('Form validation failed. (all fields required)')
    return render_template('users/inbox.html',
        user=g.user, recv=recv, sent=sent, form=form)


@mod.route('/mail/<mail_id>')
@login_required
@check_locked
def viewmail(mail_id):
    mail = Mail.query.filter_by(id=mail_id).first()
    if mail:
        return '<pre>' + str(mail) + '</pre>'
    return '[error] invalid mail id'


@mod.route('/inbox/<mail_id>')
@login_required
@check_locked
def viewemail(mail_id):
    mail = Mail.query.filter_by(id=mail_id).first()
    if not mail:
        flash('Invalid Email ID!')
        return redirect(url_for('users.inbox'))
    return render_template('users/email.html', user=g.user, mail=mail)


@mod.route('/locked')
@login_required
def locked():
    return render_template('users/locked.html', user=g.user)


@mod.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm(request.form, csrf_enabled=False)
    flag = open('/var/www/ecwi/app/templates/flags/flag_1a', 'r').read()
    flag = b64encode(flag)

    # for some reason casper fails CSRF if we don't special check
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.password == user.hashPassword(form.password.data):
            login_user(user)
            return redirect(request.args.get('next') or url_for('users.home'))
        flash('Invalid credentials', 'error-message')
    elif form.errors:
        flash('Login failed, try again. (all fields required)')
    return render_template('users/login.html', form=form, flag=flag)


@mod.route('/logout', methods=['GET'])
@login_required
def logout():
    logout_user()
    flash('You have successfully logged out.')
    return redirect(url_for('users.login'))


@mod.route('/reset', methods=['GET', 'POST'])
@login_required
def reset():
    form = ResetForm(request.form, csrf_enabled=False)
    if form.validate_on_submit():
        user = userFromEmail(email=form.email.data)
        if not user:
            flash('Email does not exist')
        elif user.secret_a == form.answer.data:
            user.setPassword(form.password.data)
            user.locked = False
            db.session.commit()
            flash('Account unlocked - Password reset')
            return redirect(url_for('users.login'))
        else:
            flash('Secret answer was incorrect, try again.')
    elif form.errors:
        flash('Form validation failed. (all fields required)')
    return render_template('users/reset.html', user=g.user, form=form)


@mod.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm(request.form, csrf_enabled=False)
    if form.validate_on_submit():
        u = User.query.filter_by(email=form.email.data).first()
        if u:
            flash('User already exists')
            return render_template("users/register.html", form=form)
        user = add_user(form.name.data, '', USER.USER,
                form.password.data,
                form.email.data, True)
        user.secret_q = form.secret_q.data
        user.secret_a = form.secret_a.data
        db.session.commit()
        flash('Account Registered - Awaiting IT approval.')
        return redirect(url_for('users.login'))
    elif form.errors:
        print form.errors
        flash('Form failed validation (fields cannot be empty)')
    return render_template("users/register.html", form=form)


@mod.route('/sendmsg/user', methods=['POST'])
@login_required
@check_locked
def sendmsgUser():
    form = request.form
    if len(form['msg']) > 0:
        add_chat(g.user.id, form['msg'], USER.USER)
    return redirect(url_for('users.home'))


@mod.route('/sendmsg/exec', methods=['POST'])
@login_required
@check_locked
def sendmsgExec():
    form = request.form
    if len(form['msg']) > 0:
        add_chat(g.user.id, form['msg'], USER.EXEC)
    return redirect('/#execChat')
